{"version":3,"sources":["constants.js","Cards.js","Controls.js","App.js","reportWebVitals.js","index.js"],"names":["CARDS","CARD_NAMES","Cards","splitRegExp","RegExp","this","typeCount","typeRemove","cardTypes","map","cards","replace","split","item","trim","slice","pickedCards","index","push","_pickRandomFromArray","cardType","card","cardIndexes","sort","a","b","cardIndex","splice","oldCard","newCard","pick","array","count","shuffle","Controls","onStageChange","stage","done","className","onClick","disabled","App","useState","cardList","setCardList","setStage","setDone","initialPrepareToRemove","cardsPreparedToRemove","prepareToRemove","prepareToRemoveACard","typeIndex","get","has","delete","canRemoveCard","set","Map","size","values","rerenderList","cardsFromType","bind","type","readOnly","checked","isStage0Done","entries","allCardsPreparedToRemove","Number","useEffect","rand","unpick","Array","from","keys","onStage0Change","repick","onStage1Change","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRA8DaA,EAAQ,CA9DH,uXAUI,8hBAoBH,yYAcF,sjBAsBJC,EAAa,CAAC,QAAS,YAAa,SAAU,Q,gBC/DtCC,E,WAEjB,aAAe,oBACX,IAAMC,EAAc,IAAIC,OAAO,WAC/BC,KAAKC,UAAY,CACb,EAAG,EAAG,EAAG,GAEbD,KAAKE,WAAa,CACd,EAAG,EAAG,EAAG,GAEbF,KAAKG,UAAYR,EAAMS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,QAAQ,MAAO,KAAKC,MAAMT,GAAaM,KAAI,SAAAI,GAAI,OAAIA,EAAKC,UAAQC,MAAM,MAChHV,KAAKW,YAAc,G,wCAGvB,WAEI,IAAI,IAAMC,KADVZ,KAAKW,YAAc,GACAX,KAAKG,UAAW,CAC/B,IAAME,EAAQL,KAAKG,UAAUS,GAC7BZ,KAAKW,YAAYE,KAAKb,KAAKc,qBAAqBT,EAAOL,KAAKC,UAAUW,KAE1E,OAAOZ,KAAKW,c,kBAGhB,SAAKI,GACD,IAAMC,EAAOhB,KAAKc,qBAAqBd,KAAKG,UAAUY,IAEtD,OADAf,KAAKW,YAAYI,GAAUF,KAAKG,GACzBA,I,oBAGX,SAAOD,EAAUE,GACbA,EAAYC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAID,KADL,oBAEHF,GAFG,IAE1B,IAAI,EAAJ,qBAAoC,CAAC,IAA3BI,EAA0B,QAChCrB,KAAKG,UAAUY,GAAUF,KAAKb,KAAKW,YAAYI,GAAUO,OAAOD,EAAW,KAHrD,iC,oBAO9B,SAAON,EAAUM,GACb,IAAME,EAAUvB,KAAKW,YAAYI,GAAUO,OAAOD,EAAW,GACvDG,EAAUxB,KAAKyB,KAAKV,GAE1B,OADAf,KAAKG,UAAUY,GAAUF,KAAKU,GACvBC,I,kCAGX,SAAqBE,GAAmB,IAAZC,EAAW,uDAAH,EAChC,OAAOC,IAAQF,GAAOJ,OAAO,EAAGK,O,YCpCzBE,MATf,YAAiD,IAA9BC,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,KAErC,OACI,qBAAKC,UAAU,WAAf,SACKF,EAAQ,EAAI,wBAAQG,QAASJ,EAAeK,UAAWH,EAA3C,4CAAkE,MCArF3B,EAAQ,IAAIR,EAqIHuC,MAnIf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNC,EADM,KACIC,EADJ,OAEaF,mBAAS,GAFtB,mBAENN,EAFM,KAECS,EAFD,OAGWH,oBAAS,GAHpB,mBAGNL,EAHM,KAGAS,EAHA,OAIoCJ,mBAASK,GAJ7C,mBAINC,EAJM,KAIiBC,EAJjB,KAsBb,SAASC,EAAqBC,EAAWzB,GACpCsB,EAAsBI,IAAID,GAAWE,IAAI3B,GAC1CsB,EAAsBI,IAAID,GAAWG,OAAO5B,GAEtC6B,EAAcJ,IACpBH,EAAsBI,IAAID,GAAWK,IAAI9B,GAE3CuB,EAAgB,IAAIQ,IAAIT,IAG1B,SAASO,EAAcJ,GACnB,GAAY,GAATf,EACD,OAAO1B,EAAMH,WAAW4C,GAAaH,EAAsBI,IAAID,GAAWO,KAEvE,GAAa,IAAVtB,EAAa,CAAC,IAAD,gBACMY,EAAsBW,UAD5B,IACnB,IAAI,EAAJ,qBAAyD,CACrD,QADqD,QACtCD,KAAO,IAFP,+BAQrB,OAAO,EAGX,SAASE,IACPhB,EAAYlC,EAAMM,YAAYP,KAAI,SAACoD,EAAeV,GAAhB,OAChC,gCACE,gCACGlD,EAAWkD,GACD,IAAVf,EAAc,6IAA2B1B,EAAMH,WAAW4C,MAAqB,MAElF,6BAEIU,EAAcpD,KAAI,SAACY,EAAMK,GAAP,OAChB,qBAAIc,UAAWe,EAAcJ,IAAcf,EAAQ,EAAGG,QAASW,EAAqBY,KAAK,KAAMX,EAAWzB,GAA1G,UACGU,EAAQ,EAAI,uBAAO2B,KAAK,WAAWC,UAAQ,EAACC,QAASjB,EAAsBI,IAAID,GAAWE,IAAI3B,KAAuB,GACrHL,IAFwHA,UARzH8B,OAmBd,SAASe,IACL,OAAO9B,EAAQ,GAGnB,WAAqC,IAAD,gBACQY,EAAsBmB,WAD9B,IAChC,IAAI,EAAJ,qBAAwE,CAAC,IAAD,yBAA7DhB,EAA6D,KAAlDU,EAAkD,KACpE,GAAGnD,EAAMH,WAAW4C,KAAeU,EAAcH,KAC/C,OAAO,GAHmB,8BAMhC,OAAO,EATaU,GAsCxB,SAASrB,IACP,IAAMC,EAAwB,IAAIS,IAChC,IAAI,IAAMxC,KAASjB,EACfgD,EAAsBQ,IAAIa,OAAOpD,GAAQ,IAAIwC,KAEjD,OAAOT,EAIX,OA9GAsB,qBAAU,WACN5D,EAAM6D,OACNX,MACD,IAEHU,qBAAU,WACRV,MACC,CAACZ,IAEJsB,qBAAU,WACK,IAAVlC,GACDU,EAAQoB,OAET,CAAClB,IAkGF,sBAAKV,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACa,IAAVF,EAAc,6HAA2B,GAC/B,IAAVA,EAAc,oRAA0D,GAC9D,IAAVA,EAAc,uCAAW,MAE5B,8BACGO,IAEH,cAAC,EAAD,CAAUP,MAAOA,EAAOD,cA7C5B,WACY,IAAVC,EAGF,WACI,IAAI8B,IAAgB,OADE,oBAEkBlB,EAAsBmB,WAFxC,IAEtB,IAAI,EAAJ,qBAAwE,CAAC,IAAD,yBAA7DhB,EAA6D,KAAlDU,EAAkD,KACtEnD,EAAM8D,OAAOrB,EAAWsB,MAAMC,KAAKb,EAAcc,UAH7B,8BAKtB9B,EAAS,GACTI,EAAgBF,KAChBa,IAVYgB,GAahB,WAA2B,IAAD,gBACgB5B,EAAsBmB,WADtC,IACxB,IAAI,EAAJ,qBAAwE,CAAC,IAAD,2BAA7DhB,EAA6D,KAAlDU,EAAkD,mBAC/CA,EAAcc,QADiC,IACtE,IAAI,EAAJ,qBAA6C,CAAC,IAApCjD,EAAmC,QAC3ChB,EAAMmE,OAAO1B,EAAWzB,IAF4C,gCADhD,8BAMxBmB,EAAS,GACTI,EAAgBF,KAChBa,IArBiCkB,IA4CuBzC,KAAMA,QC1HnD0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dbf688e4.chunk.js","sourcesContent":["export const ZATAN = `1. Perform one successful „Computers\" test.\r\n2. Kill one enemy model.\r\n3. Perform one successful \"Lockpick\" test.\r\n4. Wound two enemy models.\r\n5. Perform one successful \"Search\" test.\r\n6. Grab and hold the 1 \"item\" until the end of the game.\r\n7. Ensure that you have one model in the target zone.\r\n8. Wound the enemy leader.\r\n9. Perform one successful \"Presence\" test`;\r\n\r\nexport const RADIATION = `\r\n1. Perform three successful \"Expertise\" tests\r\nof any type or two successful \"Expertise\"\r\ntests of the same type.\r\n2. Kill more models than your\r\nenemy.\r\n3. Kill the enemy model that cost\r\nmost caps.\r\n4. Grab and hold the 2 \"item\" until the end\r\nof the game.\r\n5. At least one of your models should be\r\nin the enemy deployment zone at the\r\nend of the game.\r\n6. Ensure that you have more models in the\r\ntarget zone than your enemy.\r\n7. Select one of your models(not leader), it\r\nmustn't be wounded by an enemy untill the\r\nend of a game.\r\n`\r\n\r\nexport const ENERGY = `\r\n1. Kill the enemy leader.\r\n2. Your leader should be in the enemy depl\r\noyment zone at the end of the game.\r\n3. Collect twice as many caps as your\r\nenemy. Caps= cost of models.\r\n4. Kill twice as many models as your\r\nenemy.\r\n5. Ensure that you have at least one model in\r\nthe target zone and your enemy has none.\r\n6. You leader mustn't be killed by enemy\r\nplayer until the end of the game\r\n`\r\n\r\nexport const CHEM = `\r\n1. Perform five successful \"Expertise\" tests or\r\none successful \"Expertise\" test of each type.\r\n2. You must kill at least 80% of caps of your\r\nopponents forces.\r\n3. Grab and hold the 3 \"item\" until the end\r\nof the game.\r\n4. At the end of the game, the enemy should\r\nnot control the \"Item\".\r\n5. At least 50% of your living models,\r\nincluding the leader, must finish the\r\ngame in the enemy's deployment zone.\r\n6. Ensure that you have all\r\nyour living models in the target zone\r\nand your enemy has none.\r\n7. More than 50% of your models\r\nmust survive the battle.`;\r\n\r\nexport const CARDS = [\r\n    ZATAN, RADIATION, ENERGY, CHEM\r\n];\r\n\r\nexport const CARD_NAMES = ['ZATAN', 'RADIATION', 'ENERGY', 'CHEM'];","import {CARDS} from './constants';\r\nimport shuffle from 'shuffle-array';\r\n\r\nexport default class Cards {\r\n\r\n    constructor() {\r\n        const splitRegExp = new RegExp('\\\\d\\\\. ');\r\n        this.typeCount = [\r\n            5, 4, 3, 2\r\n        ];\r\n        this.typeRemove = [\r\n            1, 2, 2, 1\r\n        ];\r\n        this.cardTypes = CARDS.map(cards => cards.replace(/\\n/g, ' ').split(splitRegExp).map(item => item.trim()).slice(1));\r\n        this.pickedCards = [];\r\n    }\r\n    \r\n    rand() {\r\n        this.pickedCards = [];\r\n        for(const index in this.cardTypes) {\r\n            const cards = this.cardTypes[index];\r\n            this.pickedCards.push(this._pickRandomFromArray(cards, this.typeCount[index]))\r\n        }\r\n        return this.pickedCards;\r\n    }\r\n\r\n    pick(cardType) {\r\n        const card = this._pickRandomFromArray(this.cardTypes[cardType]);\r\n        this.pickedCards[cardType].push(card);\r\n        return card;\r\n    }\r\n\r\n    unpick(cardType, cardIndexes) {\r\n        cardIndexes.sort((a, b) => b - a);\r\n        for(const cardIndex of cardIndexes) {\r\n            this.cardTypes[cardType].push(this.pickedCards[cardType].splice(cardIndex, 1));\r\n        }\r\n    }\r\n\r\n    repick(cardType, cardIndex) {\r\n        const oldCard = this.pickedCards[cardType].splice(cardIndex, 1);\r\n        const newCard = this.pick(cardType);\r\n        this.cardTypes[cardType].push(oldCard);\r\n        return newCard;\r\n    }\r\n\r\n    _pickRandomFromArray(array, count = 1) {\r\n        return shuffle(array).splice(0, count);\r\n    }\r\n}","import React from 'react';\r\n\r\nfunction Controls({onStageChange, stage, done}) {\r\n\r\n    return (\r\n        <div className=\"controls\">\r\n            {stage < 2 ? <button onClick={onStageChange} disabled={!done}>Далее</button> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls;","import './App.css';\nimport Cards from './Cards';\nimport { useEffect, useState } from 'react';\nimport { CARDS, CARD_NAMES } from './constants';\nimport Controls from './Controls';\n\nconst cards = new Cards;\n\nfunction App() {\n  const [cardList, setCardList] = useState([]);\n  const [stage, setStage] = useState(0);\n  const [done, setDone] = useState(false);\n  const [cardsPreparedToRemove, prepareToRemove] = useState(initialPrepareToRemove);\n\n  useEffect(() => {\n      cards.rand();\n      rerenderList();\n  }, []);\n\n  useEffect(() => {\n    rerenderList();\n  }, [cardsPreparedToRemove]);\n\n  useEffect(() => {\n    if(stage === 0) {\n      setDone(isStage0Done());\n    }\n  }, [cardsPreparedToRemove])\n\n\n  function prepareToRemoveACard(typeIndex, cardIndex) {\n    if(cardsPreparedToRemove.get(typeIndex).has(cardIndex)) {\n      cardsPreparedToRemove.get(typeIndex).delete(cardIndex);\n    }\n    else if(canRemoveCard(typeIndex)) {\n      cardsPreparedToRemove.get(typeIndex).set(cardIndex);\n    }\n    prepareToRemove(new Map(cardsPreparedToRemove));\n  }\n \n  function canRemoveCard(typeIndex) {\n      if(stage == 0) {\n        return cards.typeRemove[typeIndex] > cardsPreparedToRemove.get(typeIndex).size;\n      }\n      else if(stage === 1) {\n        for(const cardsOfType of cardsPreparedToRemove.values()) {\n            if(cardsOfType.size > 0) {\n              return false;\n            }\n            return true;\n        }\n      }\n      return false;\n  }\n\n  function rerenderList() {\n    setCardList(cards.pickedCards.map((cardsFromType, typeIndex) =>\n      <div key={typeIndex}>\n        <div>\n          {CARD_NAMES[typeIndex]}\n          {stage === 0 ? <span> Необходимо удалить {cards.typeRemove[typeIndex]}</span> : ''}\n        </div>\n        <ol>\n          {\n            cardsFromType.map((card, cardIndex) =>  \n              <li disabled={!canRemoveCard(typeIndex) && stage < 2} onClick={prepareToRemoveACard.bind(null, typeIndex, cardIndex)} key={card}>\n                {stage < 2 ? <input type=\"checkbox\" readOnly checked={cardsPreparedToRemove.get(typeIndex).has(cardIndex)}></input> : \"\"}\n                {card}\n              </li>\n            )\n          }\n        </ol>\n      </div>\n    ));\n  }\n\n  function isStage0Done() {\n      return stage > 0 || allCardsPreparedToRemove();\n  }\n\n  function allCardsPreparedToRemove() {\n      for(const [typeIndex, cardsFromType] of cardsPreparedToRemove.entries()){\n          if(cards.typeRemove[typeIndex] !== cardsFromType.size) {\n            return false;\n          }\n      }\n      return true;\n  }\n\n  function onStageChange() {\n    stage === 0 ? onStage0Change() : onStage1Change();\n  }\n\n  function onStage0Change() {\n      if(!isStage0Done()) return;\n      for(const [typeIndex, cardsFromType] of cardsPreparedToRemove.entries()){\n        cards.unpick(typeIndex, Array.from(cardsFromType.keys()));\n      }\n      setStage(1);\n      prepareToRemove(initialPrepareToRemove());\n      rerenderList();\n  }\n\n  function onStage1Change() {\n    for(const [typeIndex, cardsFromType] of cardsPreparedToRemove.entries()){\n      for(const cardIndex of cardsFromType.keys()) {\n        cards.repick(typeIndex, cardIndex);\n      }\n    }\n    setStage(2);\n    prepareToRemove(initialPrepareToRemove());\n    rerenderList();\n}\n\n\n  function initialPrepareToRemove() {\n    const cardsPreparedToRemove = new Map();\n      for(const index in CARDS) {\n          cardsPreparedToRemove.set(Number(index), new Map);\n      }\n      return cardsPreparedToRemove;\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        {stage === 0 ? 'Удалите ненужные карты' : ''}\n        {stage === 1 ? 'Можете заменить одну карту, на случайную того-же типа' : ''}\n        {stage === 2 ? 'Готово' : ''}\n      </header>\n      <div>\n        {cardList}\n      </div>\n      <Controls stage={stage} onStageChange={onStageChange} done={done} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}